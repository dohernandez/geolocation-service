language: go

sudo: false

go:
  - 1.12.x

branches:
  only:
    - master
    - /(^|[-\/])(major|release|minor|feature|patch|issue|hotfix)[-\/]?/

env:
  global:
    - GITHUB_OWNER=$(echo ${TRAVIS_REPO_SLUG} | cut -d"/" -f1)
    - GITHUB_REPO=$(echo ${TRAVIS_REPO_SLUG} | cut -d"/" -f2)
    - BINARY_NAME=${GITHUB_REPO}
    - VERSION=$(eval ./ci/version.sh)

stages:
  - "Code Style"
  - "Unit Tests"
  - "Integration Test"
  - "Promote Release"
  - "Promote Docker Image"

jobs:
  include:
    - stage: "Code Style"
      install: skip
      script: ci/code-style.sh
      if: branch = master || type = pull_request

    - stage: "Unit Tests"
      install: skip
      script: ci/unit-tests.sh
      if: branch = master || type = pull_request

    - stage: "Integration Test"
      install: ci/install_docker_compose.sh
      before_script:
        - docker-compose -f ci/assets/docker-compose.yml up -d
        - docker-compose -f ci/assets/docker-compose.yml ps
      script: ci/integartion-tests.sh
      after_script:
        - docker-compose -f ci/assets/docker-compose.yml down
      if: branch = master || type = pull_request
      env:
        - COMPOSE_VERSION=1.23.2
        # service environment variables Example .env.template
        - CLI_IMPORT_NAME=geolocation-service-import-data
        - SERVICE_NAME=geolocation-service
        - ENVIRONMENT=test
        - LOG_LEVEL=DEBUG
        - WEB_PORT=8000
        - DATABASE_DSN=postgres://user:password@localhost:5434/geolocation?sslmode=disable

    - stage: "Promote Release"
      install: ci/bump-version.sh
      script: ci/promote-release.sh
      if: branch = master && type != pull_request

      deploy:
        provider: releases
        name: $(eval ./ci/release-name.sh)
        api_key: $GITHUB_TOKEN
        skip_cleanup: true
        file: "archive/*.tar.gz"
        file_glob: true

    - stage: "Promote Docker Image"
      install: skip
      script: ci/promote-docker-image.sh
      if: branch = master && type != pull_request
